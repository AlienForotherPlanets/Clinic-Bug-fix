"use strict"; (self.webpackChunkSnehi_Clinic = self.webpackChunkSnehi_Clinic || []).push([[465], { 18465: function (e, t, n) { n.r(t), n.d(t, { default: function () { return re } }); var i = n(72791), a = n(48704), s = n(34783), o = n(30168), r = n(64554), l = n(43896), d = n(83449), c = n(47283), m = n(82851), p = n(80258), h = n(46675), u = n(99594), x = n(17746), g = n(4268), f = n(86653), j = n(93457), Z = n(16871), D = n(35855), S = n(53994), y = n(20890), v = n(23786), b = n(94454), w = n(24518), k = n(68096), T = n(65594), I = n(85523), A = n(80184); var M, N = e => { const [t, n] = i.useState(e.status), [a, s] = i.useState(null), [o, r] = i.useState(e.id), l = (0, Z.s0)(), [d, c] = i.useState(!1); i.useEffect((() => { null != a && fetch("http://65.1.110.101:3036/Appointment/updateStatus?id=" + o + "&Status=" + t.toString(), { method: "POST" }).then((e => e.json())).then((e => { window.location.reload() })) }), [a]); return (0, A.jsxs)(D.Z, { sx: { "& .css-1uhymze-MuiTableCell-root": { padding: "10px" }, "& .css-hhoizy-MuiTypography-root": { fontSize: "14px" }, "& .css-102lq7w-MuiTypography-root": { fontSize: "16px" }, "& .css-j8cz80-MuiTypography-root": { color: "red", fontSize: "14px" } }, children: [(0, A.jsxs)(S.Z, { children: [(0, A.jsx)(y.Z, { children: e.time }), (0, A.jsx)(y.Z, { color: "primary", variant: "subtitle2", children: e.service })] }), (0, A.jsxs)(S.Z, { children: [(0, A.jsx)(y.Z, { children: e.name }), (0, A.jsx)(y.Z, { color: "textSecondary", variant: "body2", children: e.doctor })] }), (0, A.jsx)(S.Z, { children: (0, A.jsxs)(y.Z, { children: ["checked" == e.boxstatus && (0, A.jsx)(k.Z, { variant: "standard", sx: { minWidth: 80 }, children: (0, A.jsxs)(T.Z, { labelId: "demo-simple-select-standard-label", id: "demo-simple-select-standard", value: t, onChange: e => { n(e.target.value), s(t) }, children: [(0, A.jsx)(v.Z, { value: 1, children: "Waiting" }), (0, A.jsx)(v.Z, { value: 2, children: "Engaged" }), (0, A.jsx)(v.Z, { value: 3, children: "Done" })] }) }), "missed" == e.boxstatus && (0, A.jsx)(w.Z, { variant: "outlined", onClick: () => (l("/module/module-scheduleAppointment/#redirected", { state: e.data }), void console.log(e.data)), children: "Reschedule" }), "upcoming" == e.boxstatus && (0, A.jsx)(I.Z, { control: (0, A.jsx)(b.Z, { checked: d, onChange: e => { n(1), s(t) } }), label: "Checked In", sx: { fontSize: "12px" } })] }) })] }, e.id) }, C = n(58294), P = n(39281), F = n(10703), H = n(79836), B = n(53382); const z = (0, C.dD)(), _ = "#80BFFF", E = "#3399FF", O = "#007FFF", J = "#0072E5", W = "#d0d7de", R = "#424a53", U = "#24292f", Y = (0, j.Z)(g.Z)(M || (M = (0, o.Z)(["\n  font-family: IBM Plex Sans, sans-serif;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.875rem;\n  font-weight: 600;\n  background-color: transparent;\n  flex-wrap: wrap;\n  padding: 8px 10px;\n  margin: 3px 3px;\n  border: none;\n  border-radius: 7px;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    background-color: ", ";\n  }\n\n  &:focus {\n    color: #fff;\n    outline: 3px solid ", ";\n  }\n\n  &.", " {\n    background-color: #fff;\n    color: ", ";\n  }\n\n  &.", " {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])), E, _, f.Z.selected, J, x.Z.disabled), q = (0, j.Z)(u.Z)((e => { let { theme: t } = e; return "\n  \n  font-family: IBM Plex Sans, sans-serif;\n  font-size: 0.875rem;\n  padding: 15px 6px;\n  background: ".concat("dark" === t.palette.mode ? U : "#fff", ";\n  border: 1px solid ").concat("dark" === t.palette.mode ? R : W, ";\n  border-radius: 12px;\n  opacity: 0.8;\n  ") })), G = (new Date).getMonth() + 1 <= 9 ? "0" + ((new Date).getMonth() + 1) : (new Date).getMonth() + 1, L = (new Date).getDate() <= 9 ? "0" + (new Date).getDate() : (new Date).getDate(), V = (new Date).getFullYear(), X = parseInt(L) - 1 < 10 ? "0" + (parseInt(L) - 1) : parseInt(L) - 1, K = V + "-" + G + "-" + L, Q = V + "-" + G + "-" + X, $ = (0, j.Z)(h.Z)((e => { let { theme: t } = e; return "\n \n  background-color: ".concat(O, ";\n  border-radius: 5px;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: space-between;\n  box-shadow: 0px 4px 30px ").concat("dark" === t.palette.mode ? U : W, ";\n  ") })); function ee() { const [e, t] = i.useState("1"), [n, a] = i.useState("11"), [s, o] = i.useState(), [h, u] = i.useState(), [x, g] = i.useState(), [f, j] = i.useState(), [Z, D] = i.useState(); let S; const v = () => { fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=" + Q + "&Status=0").then((e => e.json())).then((e => { o(e) })), fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=" + K + "&Status=1").then((e => e.json())).then((e => { S = [e.map((e => ({ time: e.Timehour + ":" + e.TimeMin + (1 == e.Timeampm ? "am" : "pm"), name: e.PatientName, doctor: z[e.DoctorName - 1].title, service: e.Service, status: 1, id: e._id })))], S = S[0], u(S) })), fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=" + K + "&Status=2").then((e => e.json())).then((e => { S = [e.map((e => ({ time: e.Timehour + ":" + e.TimeMin + (1 == e.Timeampm ? "am" : "pm"), name: e.PatientName, doctor: z[e.DoctorName - 1].title, service: e.Service, status: 2, id: e._id })))], S = S[0], g(S) })), fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=" + K + "&Status=3").then((e => e.json())).then((e => { S = [e.map((e => ({ time: e.Timehour + ":" + e.TimeMin + (1 == e.Timeampm ? "am" : "pm"), name: e.PatientName, doctor: z[e.DoctorName - 1].title, service: e.Service, status: 3, id: e._id })))], S = S[0], j(S) })), fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=" + K + "&Status=0").then((e => e.json())).then((e => { S = [e.map((e => ({ time: e.Timehour + ":" + e.TimeMin + (1 == e.Timeampm ? "am" : "pm"), name: e.PatientName, doctor: z[e.DoctorName - 1].title, service: e.Service, status: 3, id: e._id })))], S = S[0], D(S) })) }; i.useEffect((() => { v() }), []); return s && h && x && f && Z && (0, A.jsx)(r.Z, { sx: { width: "100%", typography: "body1", marginBottom: "0px" }, children: (0, A.jsxs)(d.ZP, { value: e, children: [(0, A.jsx)(r.Z, { children: (0, A.jsxs)(c.Z, { sx: { "& .MuiTabs-flexContainer": { flexWrap: "wrap" } }, style: { "flex-wrap": "wrap" }, onChange: (e, n) => { t(n) }, "aria-label": "lab API tabs example", children: [(0, A.jsx)(l.Z, { label: "Upcoming", value: "1" }), (0, A.jsx)(l.Z, { label: "Checked in", value: "2" }), (0, A.jsx)(l.Z, { label: "Missed", value: "3" })] }) }), (0, A.jsx)(m.Z, { style: { fontFamily: "IBM Plex Sans, sans-serif", fontSize: " 0.875rem", padding: "5px 0px", backgroundColor: "#fff", opacity: .8 }, value: "1", children: 0 != Z.length ? (0, A.jsx)(P.Z, { sx: { maxHeight: "150vh" }, component: F.Z, children: (0, A.jsx)(H.Z, { stickyHeader: !0, "aria-label": "sticky table", children: (0, A.jsx)(B.Z, { children: Z.map((e => (0, A.jsx)(N, { name: e.name, time: e.time, doctor: e.doctor, service: e.service, status: e.status, id: e.id, reload: v, boxstatus: "upcoming" }))) }) }) }) : (0, A.jsx)(y.Z, { children: "No Upcoming appointments" }) }), (0, A.jsx)(m.Z, { value: "2", sx: { padding: "7px" }, children: (0, A.jsx)(d.ZP, { value: n, children: (0, A.jsx)(r.Z, { children: (0, A.jsxs)(p.Z, { defaultValue: 0, children: [(0, A.jsxs)($, { children: [(0, A.jsxs)(Y, { children: ["Waiting(", h.length, ")"] }), (0, A.jsxs)(Y, { children: ["Engaged(", x.length, ")"] }), (0, A.jsxs)(Y, { children: ["Done(", f.length, ")"] })] }), (0, A.jsx)(q, { value: 0, children: 0 != h.length ? (0, A.jsx)(P.Z, { sx: { maxHeight: "150vh" }, component: F.Z, children: (0, A.jsx)(H.Z, { stickyHeader: !0, "aria-label": "sticky table", children: (0, A.jsx)(B.Z, { children: h.map((e => (0, A.jsx)(N, { name: e.name, time: e.time, doctor: e.doctor, service: e.service, status: e.status, id: e.id, reload: v, boxstatus: "checked" }))) }) }) }) : (0, A.jsx)(y.Z, { children: "No one is waiting" }) }), (0, A.jsx)(q, { value: 1, children: 0 != x.length ? (0, A.jsx)(P.Z, { sx: { maxHeight: "150vh" }, component: F.Z, children: (0, A.jsx)(H.Z, { stickyHeader: !0, "aria-label": "sticky table", children: (0, A.jsx)(B.Z, { children: x.map((e => (0, A.jsx)(N, { name: e.name, time: e.time, doctor: e.doctor, service: e.service, status: e.status, id: e.id, reload: v, boxstatus: "checked" }))) }) }) }) : (0, A.jsx)(y.Z, { children: "No one is Engaged" }) }), (0, A.jsx)(q, { value: 2, children: 0 != f.length ? (0, A.jsx)(P.Z, { sx: { maxHeight: "150vh" }, component: F.Z, children: (0, A.jsx)(H.Z, { stickyHeader: !0, "aria-label": "sticky table", children: (0, A.jsx)(B.Z, { children: f.map((e => (0, A.jsx)(N, { name: e.name, time: e.time, doctor: e.doctor, service: e.service, status: e.status, id: e.id, reload: v, boxstatus: "checked" }))) }) }) }) : (0, A.jsx)(y.Z, { children: "Nothing to show" }) })] }) }) }) }), (0, A.jsx)(m.Z, { style: { fontFamily: "IBM Plex Sans, sans-serif", fontSize: " 0.875rem", padding: "5px 0px", backgroundColor: "#fff", opacity: .8 }, value: "3", children: 0 != s.length ? (0, A.jsx)(P.Z, { sx: { maxHeight: "150vh" }, component: F.Z, children: (0, A.jsx)(H.Z, { stickyHeader: !0, "aria-label": "sticky table", children: (0, A.jsx)(B.Z, { children: s.map((e => (0, A.jsx)(N, { name: e.PatientName, time: e.Timehour + ":" + e.TimeMin + (1 == e.Timeampm ? "am" : "pm"), doctor: e.doctor, service: e.Service, status: e.Status, id: e._id, data: e, reload: v, boxstatus: "missed" }))) }) }) }) : (0, A.jsx)(y.Z, { children: "No appointment missed yesterday" }) })] }) }) } var te = n(23735), ne = n(61889); const ie = (new Date).getMonth() + 1 <= 9 ? "0" + ((new Date).getMonth() + 1) : (new Date).getMonth() + 1, ae = (new Date).getDate() <= 9 ? "0" + (new Date).getDate() : (new Date).getDate(), se = (new Date).getFullYear() + "-" + ie + "-" + ae, oe = (0, C.dD)(); function re() { const [e, t] = (0, i.useState)(""), [n, o] = (0, i.useState)(se); let r; const [l, d] = (0, i.useState)(), c = e => { t(e.target.value) }; (0, i.useEffect)((() => { (async e => { await fetch("http://65.1.110.101:3036/Appointment/FindAppointmentByDrName?DrName=" + e).then((e => e.json())).then((e => { r = [e.map((e => ({ title: e.Service + " | " + e.CaseNumber + " | " + e.PatientName, startDate: new Date(e.AppoitmentDate.slice(0, 4), e.AppoitmentDate.slice(5, 7) - 1, e.AppoitmentDate.slice(8, 10), 1 == e.Timeampm ? e.Timehour : "" + (parseInt(e.Timehour) + 12), e.TimeMin), endtDate: new Date(e.AppoitmentDate.slice(0, 4), e.AppoitmentDate.slice(5, 7) - 1, e.AppoitmentDate.slice(8, 10), 1 == e.Timeampm ? "" + (parseInt(e.Timehour) + 1) : "" + (parseInt(e.Timehour) + 13), e.TimeMin), id: e._id, location: e.DoctorName })))], d(r[0]) })) })(e) }), [e]); return function (e) { let t = e + "=", n = document.cookie.split(";"); for (let i = 0; i < n.length; i++) { let e = n[i]; for (; " " == e.charAt(0);)e = e.substring(1); if (0 == e.indexOf(t)) return e.substring(t.length, e.length) } return "" }("validate") ? l && (0, A.jsxs)(ne.ZP, { container: !0, spacing: 1, children: [(0, A.jsxs)(ne.ZP, { item: !0, xs: 14, sm: 8.5, children: [(0, A.jsxs)(T.Z, { labelId: "demo-simple-select-label", id: "demo-simple-select", value: e, label: "DrName", onChange: c, sx: { marginTop: "10px", marginLeft: "10px" }, children: [(0, A.jsx)(v.Z, { value: 0, children: "AllAppointments" }), oe.map((e => (0, A.jsx)(v.Z, { value: e.id, children: e.title }, e.id)))] }), (0, A.jsx)(te.Z, { title: "Appointments", sx: { "& .MuiCardContent-root": { padding: "2px" } }, children: (0, A.jsxs)(s.b2, { data: l, height: "100vh", sx: { paddingTop: "3px" }, children: [(0, A.jsx)(a.f7, { currentDate: n, onCurrentDateChange: o, sx: { height: "60px" } }), (0, A.jsx)(s.oR, { startDayHour: 9, endDayHour: 18 }), (0, A.jsx)(s.hU, { startDayHour: 9, endDayHour: 19 }), (0, A.jsx)(s.o8, {}), (0, A.jsx)(s.ZS, {}), (0, A.jsx)(s.w0, {}), (0, A.jsx)(s.PY, {}), (0, A.jsx)(s.JW, {})] }) })] }), (0, A.jsx)(ne.ZP, { item: !0, xs: 14, sm: 3.5, children: (0, A.jsx)(te.Z, { sx: { height: "156vh", marginTop: "3px", padding: "0px", "& .MuiCardContent-root": { padding: "5px" } }, children: (0, A.jsx)(ee, {}) }) })] }) : (0, A.jsx)("h1", { children: "Hello error" }) } }, 58294: function (e, t, n) { n.d(t, { HG: function () { return l }, P6: function () { return d }, XA: function () { return c }, dD: function () { return s }, mS: function () { return o }, qp: function () { return r } }); const i = "employees", a = "employeeId", s = () => [{ id: "1", title: "Dr. Rakesh" }, { id: "2", title: "Dr. Akshay" }, { id: "3", title: "Dr. Snehal" }, { id: "4", title: "Dr. Pooja" }], o = () => [{ id: "10", title: "11:15 am" }, { id: "11", title: "11:30 am" }, { id: "12", title: "11:45 am" }, { id: "13", title: "12:00 pm" }, { id: "14", title: "12:15 pm" }, { id: "15", title: "12:30 pm" }, { id: "16", title: "12:45 pm" }, { id: "17", title: "1:00 pm" }, { id: "18", title: "1:15 pm" }, { id: "19", title: "1:30 pm" }, { id: "20", title: "1:45 pm" }, { id: "21", title: "2:00 pm" }, { id: "22", title: "2:15 pm" }]; function r(e) { let t = c(); e.id = function () { console.log(localStorage.getItem(a)), null == localStorage.getItem(a) && localStorage.setItem(a, "0"); var e = parseInt(localStorage.getItem(a)); return localStorage.setItem(a, (++e).toString()), e }(), t.push(e), localStorage.setItem(i, JSON.stringify(t)) } function l(e) { let t = c(), n = t.findIndex((t => t.id == e.id)); t[n] = { ...e }, localStorage.setItem(i, JSON.stringify(t)) } function d(e) { let t = c(); t = t.filter((t => t.id != e)), localStorage.setItem(i, JSON.stringify(t)) } function c() { null == localStorage.getItem(i) && localStorage.setItem(i, JSON.stringify([])); return JSON.parse(localStorage.getItem(i)).map((e => ({ ...e }))) } } }]);
//# sourceMappingURL=465.f6eb4c53.chunk.js.map