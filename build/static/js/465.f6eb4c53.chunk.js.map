{
    "version": 3,
    "file": "static/js/465.f6eb4c53.chunk.js",
    "mappings": "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",
    "sources": [
        "views/utilities/AppointmentStatusDetails.js",
        "views/utilities/Status.js",
        "views/utilities/Schedule.js",
        "views/utilities/services/employeeService.js"
    ],
    "sourcesContent": [
        "import React from 'react'\nimport { Navigate, useNavigate } from 'react-router';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Avatar,\n  Grid,\n  Typography,\n  TablePagination,\n  TableFooter\n} from '@mui/material';\nimport MenuItem from '@mui/material/MenuItem';\nimport Checkbox from '@mui/material/Checkbox';\nimport { Button } from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { Refresh } from '@mui/icons-material';\n\nconst AppointmentStatusDetails = (props) => {\n  const [appointmentStatus, setAppointmentStatus] = React.useState(props.status);\n  const [status, setStatus] = React.useState(null);\n  const [id, setiid] = React.useState(props.id);\n  // console.log(id);\n  // let status = null;\n\n  // React.useEffect(() => {\n  //   if (status != null)\n  //     console.log(appointmentStatus1);\n  // }, [status])\n\n  // React.useEffect(() => {\n  //   console.log(appointmentStatus1);\n  // }, [appointmentStatus1])\n  const history = useNavigate();\n\n  const clickMe = (data) => {\n    history(\"/module/module-scheduleAppointment/#redirected\", {\n      state:\n        props.data\n    });\n    console.log(props.data);\n  }\n  const [checked, setChecked] = React.useState(false);\n  const handleChangeStatus = (event) => {\n    setAppointmentStatus(event.target.value);\n    // setAppointmentStatus(1)\n    setStatus(appointmentStatus)\n\n  };\n  const updateData = () => {\n    fetch(\"http://65.1.110.101:3036/Appointment/updateStatus?id=\" + id + \"&Status=\" + appointmentStatus.toString(), { method: \"POST\" })\n      // fetch(\"http://65.1.110.101:3036/Appointment/updateStatus?id=\" + id + \"&Status=\" + appointmentStatus.toString(), { method: \"POST\" })\n      .then(response => {\n        return response.json()\n      })\n      .then(data => {\n        window.location.reload();\n        // console.log(status);\n        // props.reload()\n        // console.log(data);\n      })\n  }\n\n  React.useEffect(() => {\n    // console.log(status);\n    if (status != null)\n      updateData()\n  }, [status])\n\n  const handleChangeChecked = (event) => {\n    // setChecked(event.target.checked);\n    setAppointmentStatus(1)\n    setStatus(appointmentStatus)\n    // status = appointmentStatus\n  };\n  return (\n\n    <TableRow sx={{\n      '& .css-1uhymze-MuiTableCell-root': {\n        padding: '10px'\n      },\n      '& .css-hhoizy-MuiTypography-root': {\n        fontSize: '14px'\n      },\n      '& .css-102lq7w-MuiTypography-root': {\n        fontSize: '16px'\n      },\n      '& .css-j8cz80-MuiTypography-root': {\n        color: 'red',\n        fontSize: '14px'\n      }\n    }} key={props.id}>\n      <TableCell>\n        <Typography >{props.time}</Typography>\n        <Typography color=\"primary\" variant=\"subtitle2\">{props.service}</Typography>\n      </TableCell>\n      <TableCell>\n\n        <Typography >{props.name}</Typography>\n        <Typography color=\"textSecondary\" variant=\"body2\">{props.doctor}</Typography>\n\n\n      </TableCell>\n\n      <TableCell>\n        <Typography>\n          {props.boxstatus == \"checked\" && <FormControl variant=\"standard\" sx={{ minWidth: 80 }}>\n            <Select\n              labelId=\"demo-simple-select-standard-label\"\n              id=\"demo-simple-select-standard\"\n              value={appointmentStatus}\n              onChange={handleChangeStatus}\n\n            >\n              <MenuItem value={1}>Waiting</MenuItem>\n              <MenuItem value={2}>Engaged</MenuItem>\n              <MenuItem value={3}>Done</MenuItem>\n            </Select>\n          </FormControl>}\n          {\n            props.boxstatus == \"missed\" && <Button variant=\"outlined\" onClick={() => clickMe()}>Reschedule</Button>\n          }\n          {\n            props.boxstatus == \"upcoming\" && <FormControlLabel control={<Checkbox\n              checked={checked}\n\n              onChange={handleChangeChecked}\n\n            />} label=\"Checked In\" sx={{ fontSize: '12px' }} />\n          }\n        </Typography>\n      </TableCell>\n    </TableRow>\n\n  )\n}\n\nexport default AppointmentStatusDetails",
        "import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport TabsUnstyled from '@mui/base/TabsUnstyled';\r\nimport TabsListUnstyled from '@mui/base/TabsListUnstyled';\r\nimport TabPanelUnstyled from '@mui/base/TabPanelUnstyled';\r\nimport { buttonUnstyledClasses } from '@mui/base/ButtonUnstyled';\r\nimport TabUnstyled, { tabUnstyledClasses } from '@mui/base/TabUnstyled';\r\nimport { styled } from '@mui/system';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport AppointmentStatusDetails from './AppointmentStatusDetails';\r\nimport { getDoctorCollection } from './services/employeeService'\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n\r\n    Paper,\r\n\r\n    Typography,\r\n\r\n} from '@mui/material';\r\n\r\nconst drName = getDoctorCollection()\r\nconst blue = {\r\n    50: '#F0F7FF',\r\n    100: '#C2E0FF',\r\n    200: '#80BFFF',\r\n    300: '#66B2FF',\r\n    400: '#3399FF',\r\n    500: '#007FFF',\r\n    600: '#0072E5',\r\n    700: '#0059B2',\r\n    800: '#004C99',\r\n    900: '#003A75',\r\n};\r\n\r\nconst grey = {\r\n    50: '#f6f8fa',\r\n    100: '#eaeef2',\r\n    200: '#d0d7de',\r\n    300: '#afb8c1',\r\n    400: '#8c959f',\r\n    500: '#6e7781',\r\n    600: '#57606a',\r\n    700: '#424a53',\r\n    800: '#32383f',\r\n    900: '#24292f',\r\n};\r\n\r\nconst Tabd = styled(TabUnstyled)`\r\n  font-family: IBM Plex Sans, sans-serif;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  font-size: 0.875rem;\r\n  font-weight: 600;\r\n  background-color: transparent;\r\n  flex-wrap: wrap;\r\n  padding: 8px 10px;\r\n  margin: 3px 3px;\r\n  border: none;\r\n  border-radius: 7px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    background-color: ${blue[400]};\r\n  }\r\n\r\n  &:focus {\r\n    color: #fff;\r\n    outline: 3px solid ${blue[200]};\r\n  }\r\n\r\n  &.${tabUnstyledClasses.selected} {\r\n    background-color: #fff;\r\n    color: ${blue[600]};\r\n  }\r\n\r\n  &.${buttonUnstyledClasses.disabled} {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst TabPaneld = styled(TabPanelUnstyled)(\r\n    ({ theme }) => `\r\n  \r\n  font-family: IBM Plex Sans, sans-serif;\r\n  font-size: 0.875rem;\r\n  padding: 15px 6px;\r\n  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\r\n  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};\r\n  border-radius: 12px;\r\n  opacity: 0.8;\r\n  `,\r\n);\r\nconst m = (new Date().getMonth() + 1) <= 9 ? '0' + (new Date().getMonth() + 1) : (new Date().getMonth() + 1);\r\nconst d = (new Date().getDate()) <= 9 ? '0' + (new Date().getDate()) : (new Date().getDate());\r\nconst y = new Date().getFullYear();\r\nconst prevd = ((parseInt(d) - 1) < 10) ? \"0\" + (parseInt(d) - 1) : (parseInt(d) - 1);\r\nconst todayDate = y + '-' + m + '-' + d;\r\nconst prevDate = y + '-' + m + '-' + prevd\r\n// api data of USERS0 appointments \r\n// let USERS01 = [\r\n//     {\r\n//         time: '3:50pm',\r\n//         name: 'dhruvi',\r\n//         doctor: 'Rakesh',\r\n//         service: 'Consultation',\r\n//         status: 20\r\n//     },\r\n//     {\r\n//         time: '3:50pm',\r\n//         name: 'dhruvis',\r\n//         doctor: 'Rakesh',\r\n//         service: 'Consultation',\r\n//         status: 10\r\n//     }\r\n// ]\r\n// console.log(USERS01);\r\nconst TabsListd = styled(TabsListUnstyled)(\r\n    ({ theme }) => `\r\n \r\n  background-color: ${blue[500]};\r\n  border-radius: 5px;\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-content: space-between;\r\n  box-shadow: 0px 4px 30px ${theme.palette.mode === 'dark' ? grey[900] : grey[200]};\r\n  `,\r\n);\r\nexport default function LabTabs() {\r\n    const [value, setValue] = React.useState('1');\r\n    const [value2, setValue2] = React.useState('11');\r\n    const [USERS0, setUSERS0] = React.useState();\r\n    const [USERS1, setUSERS1] = React.useState();\r\n    const [USERS2, setUSERS2] = React.useState();\r\n    const [USERS3, setUSERS3] = React.useState();\r\n    const [USERS4, setUSERS4] = React.useState();\r\n    let USERS;\r\n    const fetchData = () => {\r\n        fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=\" + prevDate + \"&Status=0\")\r\n            .then(response => {\r\n                const resp = response.json();\r\n                return resp;\r\n            })\r\n            .then(users => {\r\n                setUSERS0(users)\r\n            })\r\n\r\n        fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=\" + todayDate + \"&Status=1\")\r\n            .then(response => {\r\n                const resp = response.json();\r\n                return resp;\r\n            })\r\n            .then(users => {\r\n                USERS = [\r\n                    users.map(data => (\r\n                        {\r\n                            time: data.Timehour + \":\" + data.TimeMin + (data.Timeampm == 1 ? 'am' : 'pm'),\r\n                            name: data.PatientName,\r\n                            doctor: drName[data.DoctorName - 1].title,\r\n                            service: data.Service,\r\n                            status: 1,\r\n                            id: data._id\r\n                        }\r\n                    ))]\r\n                USERS = USERS[0]\r\n                setUSERS1(USERS)\r\n            })\r\n        fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=\" + todayDate + \"&Status=2\")\r\n            .then(response => {\r\n                const resp = response.json();\r\n                return resp;\r\n            })\r\n            .then(users => {\r\n                USERS = [\r\n                    users.map(data => (\r\n                        {\r\n                            time: data.Timehour + \":\" + data.TimeMin + (data.Timeampm == 1 ? 'am' : 'pm'),\r\n                            name: data.PatientName,\r\n                            doctor: drName[data.DoctorName - 1].title,\r\n                            service: data.Service,\r\n                            status: 2,\r\n                            id: data._id\r\n                        }\r\n                    ))]\r\n                USERS = USERS[0]\r\n                setUSERS2(USERS)\r\n            })\r\n        fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=\" + todayDate + \"&Status=3\")\r\n            .then(response => {\r\n                const resp = response.json();\r\n                return resp;\r\n            })\r\n            .then(users => {\r\n                USERS = [\r\n                    users.map(data => (\r\n                        {\r\n                            time: data.Timehour + \":\" + data.TimeMin + (data.Timeampm == 1 ? 'am' : 'pm'),\r\n                            name: data.PatientName,\r\n                            doctor: drName[data.DoctorName - 1].title,\r\n                            service: data.Service,\r\n                            status: 3,\r\n                            id: data._id\r\n                        }\r\n                    ))]\r\n                USERS = USERS[0]\r\n                setUSERS3(USERS)\r\n            })\r\n        fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDate?Date=\" + todayDate + \"&Status=0\")\r\n            .then(response => {\r\n                const resp = response.json();\r\n                return resp;\r\n            })\r\n            .then(users => {\r\n                USERS = [\r\n                    users.map(data => (\r\n                        {\r\n                            time: data.Timehour + \":\" + data.TimeMin + (data.Timeampm == 1 ? 'am' : 'pm'),\r\n                            name: data.PatientName,\r\n                            doctor: drName[data.DoctorName - 1].title,\r\n                            service: data.Service,\r\n                            status: 3,\r\n                            id: data._id\r\n                        }\r\n                    ))]\r\n                USERS = USERS[0]\r\n                setUSERS4(USERS)\r\n            })\r\n    }\r\n    React.useEffect(() => {\r\n        fetchData()\r\n    }, []);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        USERS0 && USERS1 && USERS2 && USERS3 && USERS4 &&\r\n        < Box sx={{ width: '100%', typography: 'body1', marginBottom: '0px' }\r\n        }>\r\n            <TabContext value={value}>\r\n                <Box >\r\n                    <TabList sx={{\r\n                        '& .MuiTabs-flexContainer': {\r\n                            flexWrap: 'wrap',\r\n                        },\r\n                    }} style={{ 'flex-wrap': 'wrap' }} onChange={handleChange} aria-label=\"lab API tabs example\">\r\n                        <Tab label=\"Upcoming\" value=\"1\" />\r\n                        <Tab label=\"Checked in\" value=\"2\" />\r\n                        <Tab label=\"Missed\" value=\"3\" />\r\n                    </TabList>\r\n                </Box>\r\n                <TabPanel style={{\r\n                    fontFamily: 'IBM Plex Sans, sans-serif',\r\n                    fontSize: ' 0.875rem',\r\n                    padding: '5px 0px',\r\n                    backgroundColor: '#fff',\r\n                    opacity: 0.8\r\n                }} value=\"1\">\r\n                    {USERS4.length != 0 ?\r\n                        <TableContainer sx={{ maxHeight: '150vh' }} component={Paper} >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableBody>\r\n                                    {/*done upcomong USERS0 data  */}\r\n                                    {USERS4.map((row) => (\r\n                                        <AppointmentStatusDetails name={row.name} time={row.time} doctor={row.doctor} service={row.service} status={row.status} id={row.id} reload={fetchData} boxstatus=\"upcoming\" />\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        : <Typography >No Upcoming appointments</Typography>}\r\n                </TabPanel>\r\n                <TabPanel value=\"2\" sx={{\r\n                    padding: '7px'\r\n                }}>\r\n                    <TabContext value={value2}>\r\n                        <Box >\r\n                            <TabsUnstyled defaultValue={0}>\r\n                                <TabsListd  >\r\n                                    <Tabd>Waiting({USERS1.length})</Tabd>\r\n                                    <Tabd>Engaged({USERS2.length})</Tabd>\r\n                                    <Tabd>Done({USERS3.length})</Tabd>\r\n                                </TabsListd>\r\n                                <TabPaneld value={0}>\r\n                                    {USERS1.length != 0 ?\r\n                                        <TableContainer sx={{ maxHeight: '150vh' }} component={Paper} >\r\n                                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                                <TableBody>\r\n                                                    {/* done checkded USERS0 data(waiting ) */}\r\n                                                    {USERS1.map((row) => (\r\n                                                        <AppointmentStatusDetails name={row.name} time={row.time} doctor={row.doctor} service={row.service} status={row.status} id={row.id} reload={fetchData} boxstatus=\"checked\" />\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                        : <Typography >No one is waiting</Typography>}\r\n                                </TabPaneld>\r\n                                <TabPaneld value={1}>\r\n                                    {USERS2.length != 0 ?\r\n                                        <TableContainer sx={{ maxHeight: '150vh' }} component={Paper} >\r\n                                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                                <TableBody>\r\n                                                    {/* done engaed in checked api data */}\r\n                                                    {USERS2.map((row) => (\r\n                                                        <AppointmentStatusDetails name={row.name} time={row.time} doctor={row.doctor} service={row.service} status={row.status} id={row.id} reload={fetchData} boxstatus=\"checked\" />\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                        : <Typography >No one is Engaged</Typography>}\r\n                                </TabPaneld>\r\n                                <TabPaneld value={2}>\r\n                                    {USERS3.length != 0 ?\r\n                                        <TableContainer sx={{ maxHeight: '150vh' }} component={Paper} >\r\n                                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                                <TableBody>\r\n                                                    {/* done api called for checked  */}\r\n                                                    {USERS3.map((row) => (\r\n                                                        <AppointmentStatusDetails name={row.name} time={row.time} doctor={row.doctor} service={row.service} status={row.status} id={row.id} reload={fetchData} boxstatus=\"checked\" />\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                        : <Typography >Nothing to show</Typography>}\r\n                                </TabPaneld>\r\n                            </TabsUnstyled>\r\n                        </Box>\r\n                    </TabContext>\r\n                </TabPanel>\r\n                <TabPanel style={{\r\n                    fontFamily: 'IBM Plex Sans, sans-serif',\r\n                    fontSize: ' 0.875rem',\r\n                    padding: '5px 0px',\r\n                    backgroundColor: '#fff',\r\n                    opacity: 0.8\r\n                }} value=\"3\">\r\n                    {USERS0.length != 0 ?\r\n                        <TableContainer sx={{ maxHeight: '150vh' }} component={Paper} >\r\n                            <Table stickyHeader aria-label=\"sticky table\">\r\n                                <TableBody>\r\n                                    {USERS0.map((row) => (\r\n                                        //done missed USERS0 data \r\n                                        <AppointmentStatusDetails name={row.PatientName} time={row.Timehour + \":\" + row.TimeMin + (row.Timeampm == 1 ? 'am' : 'pm')} doctor={row.doctor} service={row.Service} status={row.Status} id={row._id} data={row} reload={fetchData} boxstatus=\"missed\" />\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        : <Typography >No appointment missed yesterday</Typography>}\r\n                </TabPanel>\r\n\r\n            </TabContext>\r\n        </Box >\r\n    );\r\n}",
        "import * as React from 'react';\nimport { useEffect, useState } from \"react\"\nimport { ViewState } from '@devexpress/dx-react-scheduler';\nimport { Button } from '@mui/material';\nimport {\n  Scheduler,\n  WeekView,\n  Toolbar,\n  DayView,\n  DateNavigator,\n  Appointments,\n  TodayButton,\n  ViewSwitcher,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport Status from './Status'\nimport MenuItem from '@mui/material/MenuItem';\nimport MainCard from 'ui-component/cards/MainCard'\nimport { Grid } from '@mui/material'\nimport { getDoctorCollection } from './services/employeeService'\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nconst m = (new Date().getMonth() + 1) <= 9 ? '0' + (new Date().getMonth() + 1) : (new Date().getMonth() + 1);\nconst d = (new Date().getDate()) <= 9 ? '0' + (new Date().getDate()) : (new Date().getDate());\nconst y = new Date().getFullYear();\nconst todayDate = y + '-' + m + '-' + d;\nconst drName = getDoctorCollection()\n\n\nfunction getCookie(cname) {\n  let name = cname + \"=\";\n  let ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport default function Demo() {\n  const [DrName, setDrName] = useState('');\n  const [currentDate, setCurrentDate] = useState(todayDate);\n  let appointments;\n  const [data, setData] = useState();\n\n  const fetchData = async (DrName) => {\n    await fetch(\"http://65.1.110.101:3036/Appointment/FindAppointmentByDrName?DrName=\" + DrName)\n      .then(response => {\n        const resp = response.json();\n        return resp;\n      })\n      .then(users => {\n        appointments = [\n          users.map(data => (\n            {\n              title: data.Service + \" | \" + data.CaseNumber + \" | \" + data.PatientName,\n              startDate: new Date(data.AppoitmentDate.slice(0, 4), data.AppoitmentDate.slice(5, 7) - 1, data.AppoitmentDate.slice(8, 10), (data.Timeampm == 1 ? data.Timehour : \"\" + (parseInt(data.Timehour) + 12)), data.TimeMin),\n              endtDate: new Date(data.AppoitmentDate.slice(0, 4), data.AppoitmentDate.slice(5, 7) - 1, data.AppoitmentDate.slice(8, 10), (data.Timeampm == 1 ? \"\" + (parseInt(data.Timehour) + 1) : \"\" + (parseInt(data.Timehour) + 13)), data.TimeMin),\n              // endtDate: new Date(data.AppoitmentDate.slice(0, 4), data.AppoitmentDate.slice(5, 7) - 1, data.AppoitmentDate.slice(8, 10), (parseInt(data.TimeMin) + 30 >= 60 ? (data.Timeampm == 1 ? \"\" + (parseInt(data.Timehour) + 1) : \"\" + (parseInt(data.Timehour) + 13)) : (data.Timeampm == 1 ? data.Timehour : \"\" + (parseInt(data.Timehour) + 12))), \"\" + ((parseInt(data.TimeMin) + 30) % 60)),\n              id: data._id,\n              location: data.DoctorName,\n            }\n          ))]\n        setData(appointments[0])\n      })\n  }\n  const handleChange = (event) => {\n    setDrName(event.target.value);\n  };\n  useEffect(() => {\n    fetchData(DrName)\n  }, [DrName]);\n  const setDateToToday = () => {\n    // setCurrentDate(todayDate)\n\n  }\n  if (getCookie(\"validate\")) {\n    return (\n      data &&\n      <Grid container spacing={1}>\n        <Grid item xs={14} sm={8.5}>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={DrName}\n            label=\"DrName\"\n            onChange={handleChange}\n            sx={{ marginTop: '10px', marginLeft: '10px' }}\n          >\n            <MenuItem value={0} >AllAppointments</MenuItem>\n            {\n              drName.map(\n                item => (<MenuItem key={item.id} value={item.id}>{item.title}</MenuItem>)\n              )\n            }\n          </Select>\n          <MainCard title=\"Appointments\" sx={{ \"& .MuiCardContent-root\": { padding: '2px' } }} >\n            <Scheduler\n              data={data}\n              height={'100vh'}\n              sx={{ paddingTop: '3px' }}\n\n            >\n              <ViewState\n                currentDate={currentDate}\n                onCurrentDateChange={setCurrentDate}\n                sx={{ height: '60px' }}\n              />\n              <DayView\n                startDayHour={9}\n                endDayHour={18}\n              />\n              <WeekView\n                startDayHour={9}\n                endDayHour={19}\n              />\n              <Toolbar />\n              <DateNavigator />\n              <TodayButton />\n              <ViewSwitcher />\n              <Appointments />\n            </Scheduler>\n          </MainCard>\n        </Grid>\n        <Grid item xs={14} sm={3.5}>\n          <MainCard sx={{ height: '156vh', marginTop: '3px', padding: '0px', \"& .MuiCardContent-root\": { padding: '5px' } }}>\n            <Status />\n          </MainCard>\n        </Grid>\n      </Grid >\n    );\n\n  } else {\n    return (<h1>Hello error</h1>)\n    // return (window.location.href = \"/Login\")\n  }\n}",
        "// import { useEffect, useState } from \"react\"\nconst KEYS = {\n    appointmzzzzzzents: 'appointments',\n    appointmentId: 'appointmentId',\n    employees: 'employees',\n    employeeId: 'employeeId'\n}\n\nexport const getDoctorCollection = () => ([\n    { id: '1', title: 'Dr. Rakesh' },\n    { id: '2', title: 'Dr. Akshay' },\n    { id: '3', title: 'Dr. Snehal' },\n    { id: '4', title: 'Dr. Pooja' },\n])\n\nexport const meridiem = () => ([\n    { id: '1', title: 'AM' },\n    { id: '2', title: 'PM' },\n\n])\n\nexport const getTimeCollection = () => ([\n    { id: '10', title: '11:15 am' },\n    { id: '11', title: '11:30 am' },\n    { id: '12', title: '11:45 am' },\n    { id: '13', title: '12:00 pm' },\n    { id: '14', title: '12:15 pm' },\n    { id: '15', title: '12:30 pm' },\n    { id: '16', title: '12:45 pm' },\n    { id: '17', title: '1:00 pm' },\n    { id: '18', title: '1:15 pm' },\n    { id: '19', title: '1:30 pm' },\n    { id: '20', title: '1:45 pm' },\n    { id: '21', title: '2:00 pm' },\n    { id: '22', title: '2:15 pm' },\n\n])\n\nexport const getampm = () => ([\n    { id: '1', title: 'am' },\n    { id: '2', title: 'pm' }\n])\nexport const getServiceCollection = () => ([\n    { id: '1', title: 'Service 1', price: '₹ 500' },\n    { id: '2', title: 'Service 2', price: '₹ 400' },\n    { id: '3', title: 'Service 3', price: '₹ 750' },\n    { id: '4', title: 'Service 4', price: '₹ 800' },\n])\nexport const getDepartmentCollection = () => ([\n    { id: '1', title: 'Development' },\n    { id: '2', title: 'Marketing' },\n    { id: '3', title: 'Accounting' },\n    { id: '4', title: 'HR' },\n])\nexport function insertEmployee(data) {\n    let employees = getAllEmployees();\n    data['id'] = generateEmployeeId()\n    employees.push(data)\n    localStorage.setItem(KEYS.employees, JSON.stringify(employees))\n}\n\nexport function updateEmployee(data) {\n    let employees = getAllEmployees();\n    let recordIndex = employees.findIndex(x => x.id == data.id);\n    employees[recordIndex] = { ...data }\n    localStorage.setItem(KEYS.employees, JSON.stringify(employees));\n}\nexport function deleteEmployee(id) {\n    let employees = getAllEmployees();\n    employees = employees.filter(x => x.id != id)\n    localStorage.setItem(KEYS.employees, JSON.stringify(employees));\n}\n\nexport function generateEmployeeId() {\n    console.log(localStorage.getItem(KEYS.employeeId))\n    if (localStorage.getItem(KEYS.employeeId) == null) {\n        localStorage.setItem(KEYS.employeeId, '0')\n    }\n    var id = parseInt(localStorage.getItem(KEYS.employeeId))\n    localStorage.setItem(KEYS.employeeId, (++id).toString())\n    return id;\n}\n\nexport function getAllEmployees() {\n    if (localStorage.getItem(KEYS.employees) == null)\n        localStorage.setItem(KEYS.employees, JSON.stringify([]))\n    let employees = JSON.parse(localStorage.getItem(KEYS.employees));\n    //map departmentID to department title\n    let departments = getDepartmentCollection();\n    return employees.map(x => ({\n        ...x,\n    }))\n}"
    ],
    "names": [
        "props",
        "appointmentStatus",
        "setAppointmentStatus",
        "React",
        "status",
        "setStatus",
        "id",
        "setiid",
        "history",
        "useNavigate",
        "checked",
        "setChecked",
        "fetch",
        "toString",
        "method",
        "then",
        "response",
        "json",
        "data",
        "window",
        "location",
        "reload",
        "TableRow",
        "sx",
        "padding",
        "fontSize",
        "color",
        "TableCell",
        "Typography",
        "time",
        "variant",
        "service",
        "name",
        "doctor",
        "boxstatus",
        "FormControl",
        "minWidth",
        "Select",
        "labelId",
        "value",
        "onChange",
        "event",
        "target",
        "MenuItem",
        "Button",
        "onClick",
        "state",
        "console",
        "log",
        "FormControlLabel",
        "control",
        "Checkbox",
        "label",
        "drName",
        "getDoctorCollection",
        "blue",
        "grey",
        "Tabd",
        "styled",
        "TabUnstyled",
        "tabUnstyledClasses",
        "buttonUnstyledClasses",
        "TabPaneld",
        "TabPanelUnstyled",
        "theme",
        "palette",
        "mode",
        "m",
        "Date",
        "getMonth",
        "d",
        "getDate",
        "y",
        "getFullYear",
        "prevd",
        "parseInt",
        "todayDate",
        "prevDate",
        "TabsListd",
        "TabsListUnstyled",
        "LabTabs",
        "setValue",
        "value2",
        "setValue2",
        "USERS0",
        "setUSERS0",
        "USERS1",
        "setUSERS1",
        "USERS2",
        "setUSERS2",
        "USERS3",
        "setUSERS3",
        "USERS4",
        "setUSERS4",
        "USERS",
        "fetchData",
        "users",
        "map",
        "Timehour",
        "TimeMin",
        "Timeampm",
        "PatientName",
        "DoctorName",
        "title",
        "Service",
        "_id",
        "Box",
        "width",
        "typography",
        "marginBottom",
        "TabContext",
        "TabList",
        "flexWrap",
        "style",
        "newValue",
        "Tab",
        "TabPanel",
        "fontFamily",
        "backgroundColor",
        "opacity",
        "length",
        "TableContainer",
        "maxHeight",
        "component",
        "Paper",
        "Table",
        "stickyHeader",
        "TableBody",
        "row",
        "TabsUnstyled",
        "defaultValue",
        "Status",
        "Demo",
        "DrName",
        "setDrName",
        "useState",
        "currentDate",
        "setCurrentDate",
        "appointments",
        "setData",
        "handleChange",
        "useEffect",
        "async",
        "CaseNumber",
        "startDate",
        "AppoitmentDate",
        "slice",
        "endtDate",
        "cname",
        "ca",
        "document",
        "cookie",
        "split",
        "i",
        "c",
        "charAt",
        "substring",
        "indexOf",
        "getCookie",
        "Grid",
        "container",
        "spacing",
        "item",
        "xs",
        "sm",
        "marginTop",
        "marginLeft",
        "MainCard",
        "height",
        "paddingTop",
        "onCurrentDateChange",
        "startDayHour",
        "endDayHour",
        "KEYS",
        "getTimeCollection",
        "insertEmployee",
        "employees",
        "getAllEmployees",
        "localStorage",
        "getItem",
        "setItem",
        "generateEmployeeId",
        "push",
        "JSON",
        "stringify",
        "updateEmployee",
        "recordIndex",
        "findIndex",
        "x",
        "deleteEmployee",
        "filter",
        "parse"
    ],
    "sourceRoot": ""
}